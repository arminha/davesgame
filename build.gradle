
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE")
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply from: rootProject.file('gradle/codequality.gradle')

  sourceCompatibility = 1.7

  repositories {
    mavenCentral()
  }

  dependencies {
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
  }

  test {
    testLogging {
      exceptionFormat = 'full'
    }
  }

  jacoco {
    toolVersion = '0.7.6.201602180812'
  }
  jacocoTestReport.dependsOn(test)
}

project('message-generator') {
  apply plugin: 'application'

  mainClassName = 'arminha.davesgame.messagegenerator.GeneratorMain'

  dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.4'
    compile 'com.sun.codemodel:codemodel:2.6'
    compile 'org.yaml:snakeyaml:1.14'
    compile 'args4j:args4j:2.32'
  }

  jar {
    manifest {
      attributes 'Main-Class': mainClassName
    }
  }
}

project('davesgame-domain') {
  configurations {
    generator
  }

  dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.4'

    generator project(':message-generator')

    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
    testCompile 'uk.co.jemos.podam:podam:3.0.6.RELEASE'
  }

  sourceSets {
    main {
      java {
        srcDirs = ['src/main/java', 'src/main/generated']
      }
    }
  }

  // excludes generated source files from checkstyle analysis
  checkstyleMain.source = "src/main/java"

  task generateMessages(type: JavaExec) {
    description = 'Generate Java source for message definitions'
    classpath = configurations.generator
    main = 'arminha.davesgame.messagegenerator.GeneratorMain'
    def definitionFiles = files { file('src/main/messages').listFiles() }
    args = ['-d', 'src/main/generated'] + definitionFiles.collect { relativePath(it) }
    inputs.files definitionFiles
    outputs.dir 'src/main/generated'
  }
  compileJava.dependsOn(generateMessages)
}

project('davesgame-authenticate') {
}

project('davesgame-rest') {
  dependencies {
    compile project(':davesgame-authenticate')
    compile 'com.google.guava:guava:18.0'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'commons-codec:commons-codec:1.10'

    testRuntime 'org.glassfish.jersey.core:jersey-common:2.22'
  }
}

project('davesgame-userdb') {
  dependencies {
    compile project(':davesgame-authenticate')
    compile 'org.eclipse.persistence:javax.persistence:2.1.0'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'com.google.guava:guava:18.0'
    compile 'org.slf4j:slf4j-api:1.7.13'

    testRuntime 'org.eclipse.persistence:eclipselink:2.6.1'
    testRuntime 'com.h2database:h2:1.4.190'
    testRuntime 'org.slf4j:slf4j-simple:1.7.13'
  }
}

project('davesgame-server') {
  apply plugin: 'spring-boot'

  configurations {
	all*.exclude group:'commons-logging', module:'commons-logging'
  }

  dependencies {
    compile project(':davesgame-domain')
    compile project(':davesgame-authenticate')

    compile("org.springframework.boot:spring-boot-starter-jersey") {
      exclude module: 'spring-boot-starter-tomcat'
      exclude module: 'jersey-bean-validation'
    }
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'org.glassfish.jersey.ext:jersey-spring3:2.22'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.22'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.22'
    compile 'commons-codec:commons-codec:1.10'

    runtime "org.springframework.boot:spring-boot-starter-jetty"
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}
